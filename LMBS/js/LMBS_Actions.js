// Generated by RPG Maker.
// Do not edit this file directly.
var $plugins =
[
  {"name":"LMBS＿Motion","status":true,"description":"","parameters":{}}
];



//=============================================================================
/**
 */
function LMBS_ActionBehavior() { this.initialize.apply(this, arguments); }
LMBS_ActionBehavior.prototype.constructor = LMBS_ActionBehavior;

/** constructor */
LMBS_ActionBehavior.prototype.initialize = function(frameRange) {
    this._frameRange = frameRange;  // 要素数 2 で、[開始フレーム][フレーム数]
};

/** */
LMBS_ActionBehavior.prototype.isValidInFrame = function(frameCount) {
    if (this._frameRange == null || this._frameRange[0] < 0) {
        return true;
    }
    if (this._frameRange[0] <= frameCount && frameCount < this._frameRange[0] + this._frameRange[1]) {
        return true;
    }
    return false;
};

/** */
LMBS_ActionBehavior.prototype.onUpdate = function(battlerObj) {
};

/** */
LMBS_ActionBehavior.prototype.onUserInput = function(battlerObj) {
};

//=============================================================================
/**
 * このビヘイビアをもっているかどうかは、AI がスキル開始を判断するざいりょうになる。かも。
 */
function LMBS_ActionBehavior_SkillStart() { this.initialize.apply(this, arguments); }
LMBS_ActionBehavior_SkillStart.prototype = Object.create(LMBS_ActionBehavior.prototype);
LMBS_ActionBehavior_SkillStart.prototype.constructor = LMBS_ActionBehavior_SkillStart;

/** constructor */
LMBS_ActionBehavior_SkillStart.prototype.initialize = function() {
};

/** overiide */
LMBS_ActionBehavior_SkillStart.prototype.onUpdate = function(battlerObj) {
};

/** overiide */
LMBS_ActionBehavior_SkillStart.prototype.onUserInput = function(battlerObj) {
    if (Input.isTriggered(LMBS_Settings.keyNormalAttack)) {
        console.log(22222);
    }
};

//=============================================================================
/**
 *
 */
function LMBS_PredefinedUserInput() {
    throw new Error('This is a static class');
};

/**
 *
 */
LMBS_PredefinedUserInput.tryInputNormalAttack = function(battlerObj) {
    if (Input.isTriggered(LMBS_Settings.keyNormalAttack)) {

    }
};

//=============================================================================
/**
 *
 */
function LMBS_ActionManager() {
    throw new Error('This is a static class');
};

LMBS_ActionManager._actions   = {};

/**
 */
LMBS_ActionManager.setup = function() {
    this.registerAction({}, new LMBS_IdleAction("Idle", [new LMBS_ActionBehavior_SkillStart([-1,-1])]));
    this.registerAction({}, new LMBS_WalkAction("Walk", []));
    this.registerAction({}, new LMBS_JumpAction("Jump", []));
    this.registerAction({}, new LMBS_FallAction("Fall", []));
};

/**
 * @param name {String}
 * @param motion {LMBS_Motion}
 * condition
 *    今のところ、多分連続攻撃回数だけでいい気もする。
 *    通常攻撃はもちろんのこと、Gだと同じ技を連続で出すと動作が変わる。
 */
LMBS_ActionManager.registerAction = function(condition,/*actorId, classId, weaponId,*/ action) {
    this._actions[action.name] = action;
};

/**
 * @param name {String}
 */
LMBS_ActionManager.getAction = function(name) {
    return this._actions[name];
};

//=============================================================================
// LMBS_Action
//-----------------------------------------------------------------------------
//
//=============================================================================
function LMBS_Action() { this.initialize.apply(this, arguments); }
LMBS_Action.prototype.constructor = LMBS_Action;

/**
 * constructor
 */
LMBS_Action.prototype.initialize = function(name, behaviors) {
    this.name = name;
    this._behaviors = behaviors;
};

/** */
LMBS_Action.prototype.getCommandList = function() {
    return null;
};

/**
 */
LMBS_Action.prototype.onAttached = function(battlerObj) {
};

/**
 */
LMBS_Action.prototype.onUpdate = function(battlerObj) {
};

/** 新しく接地したとき */
LMBS_Action.prototype.onStandGround = function(battlerObj) {
};

/** 地面から離れた時 */
LMBS_Action.prototype.onLeaveGround = function(battlerObj) {
};

/** */
LMBS_Action.prototype.onUserInput = function(battlerObj) {
    this._behaviors.forEach(function(behavior) {
        if (behavior.isValidInFrame(battlerObj.getActionRunner().getFrameCount())) {
            behavior.onUserInput(battlerObj);
        }
    });
};

//=============================================================================
/**
 * アイドリング（待機）アクション
 * @class LMBS_IdleAction
 * @constructor
 */
function LMBS_IdleAction() { this.initialize.apply(this, arguments); }
LMBS_IdleAction.prototype = Object.create(LMBS_Action.prototype);
LMBS_IdleAction.prototype.constructor = LMBS_IdleAction;

/**
 * constructor
 */
LMBS_IdleAction.prototype.initialize = function(name, behaviors) {
    LMBS_Action.prototype.initialize.call(this, name, behaviors);
};

/**
 *  override
 */
LMBS_IdleAction.prototype.onAttached = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);
    // モーション開始
    battlerObj.changeMotion("basic_wait");
};

/**
 */
LMBS_IdleAction.prototype.onUserInput = function(battlerObj) {
    LMBS_Action.prototype.onUserInput.call(this, battlerObj);
    if (Input.dir4 == 4) {
        battlerObj.direction = LMBS_Battler.DIRECTION.LEFT;
        battlerObj.changeAction("Walk");
    }
    else if (Input.dir4 == 6) {
        battlerObj.direction = LMBS_Battler.DIRECTION.RIGHT;
        battlerObj.changeAction("Walk");
    }
    if (Input.isPressed('up')) {
        battlerObj.changeAction("Jump");
    }
};

/**
 *  override
 */
LMBS_IdleAction.prototype.onUpdate = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);

    // ターゲットに向く
    var target = battlerObj.getActionTargetBattlerObject();
    if (target != null) {
        var d = target.position.x - battlerObj.position.x;
        battlerObj.direction = d / Math.abs(d); // 正規化。1Dなのでこれでいい。
    }
};

//=============================================================================
/**
 * 歩行アクション
 * @class LMBS_WalkAction
 * @constructor
 */
function LMBS_WalkAction() { this.initialize.apply(this, arguments); }
LMBS_WalkAction.prototype = Object.create(LMBS_Action.prototype);
LMBS_WalkAction.prototype.constructor = LMBS_WalkAction;

/**
 * constructor
 */
LMBS_WalkAction.prototype.initialize = function(name, behaviors) {
    LMBS_Action.prototype.initialize.call(this, name, behaviors);
};

/**
 *  override
 */
LMBS_WalkAction.prototype.onAttached = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);
    // モーション開始
    battlerObj.changeMotion("basic_move");

    // test
    var animation = $dataAnimations[2];
    //var mirror = data.mirror;
    //var delay = animation.position === 3 ? 0 : data.delay;
    //battlerObj._visual.mainSprite.startAnimation(animation, false, 0);
};

/**
 *  override
 */
LMBS_WalkAction.prototype.onUserInput = function(battlerObj) {
    LMBS_Action.prototype.onUserInput.call(this, battlerObj);
    var vel = battlerObj.direction;
    if (Input.isPressed('left')) {
        battlerObj.mainBody.applyMovement(vel);
    }
    else if (Input.isPressed('right')) {
        battlerObj.mainBody.applyMovement(vel);
    }
    else {
        // キーが押されていなければ Idle 状態へ
        battlerObj.changeAction("Idle");
    }
};

/**
 *  override
 */
LMBS_WalkAction.prototype.onUpdate = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);
};


//=============================================================================
/**
 * ジャンプアクション
 */
function LMBS_JumpAction() { this.initialize.apply(this, arguments); }
LMBS_JumpAction.prototype = Object.create(LMBS_Action.prototype);
LMBS_JumpAction.prototype.constructor = LMBS_JumpAction;

/** constructor */
LMBS_JumpAction.prototype.initialize = function(name, behaviors) {
    LMBS_Action.prototype.initialize.call(this, name, behaviors);
};

/** override */
LMBS_JumpAction.prototype.onAttached = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);
    battlerObj.changeMotion("Jump");
    battlerObj.mainBody.applyImpulse(0, 5);
};

/** override */
LMBS_JumpAction.prototype.onUserInput = function(battlerObj) {
    LMBS_Action.prototype.onUserInput.call(this, battlerObj);
    var vel = battlerObj.direction;
    if (Input.isPressed('left')) {
        battlerObj.mainBody.applyMovement(-vel);
    }
    else if (Input.isPressed('right')) {
        battlerObj.mainBody.applyMovement(vel);
    }
    else {
        // キーが押されていなければ Idle 状態へ
        //battlerObj.changeAction("Idle");
    }
};

/** override */
LMBS_JumpAction.prototype.onUpdate = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);
    // 降下し始めた時
    if (battlerObj.mainBody.getVelocity().y <= 0) {
        battlerObj.changeHomeAction();
    }
};

/** override */
LMBS_JumpAction.prototype.onStandGround = function(battlerObj) {
    battlerObj.changeAction("Idle");
};


//=============================================================================
/**
 * 降下
 */
function LMBS_FallAction() { this.initialize.apply(this, arguments); }
LMBS_FallAction.prototype = Object.create(LMBS_Action.prototype);
LMBS_FallAction.prototype.constructor = LMBS_JumpAction;

/** constructor */
LMBS_FallAction.prototype.initialize = function(name, behaviors) {
    LMBS_Action.prototype.initialize.call(this, name, behaviors);
};

/** override */
LMBS_FallAction.prototype.onAttached = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);
    battlerObj.changeMotion("Fall");
};

/** override */
LMBS_FallAction.prototype.onUserInput = function(battlerObj) {
    LMBS_Action.prototype.onUserInput.call(this, battlerObj);
    var vel = battlerObj.direction;
    if (Input.isPressed('left')) {
        battlerObj.mainBody.applyMovement(-vel);
    }
    else if (Input.isPressed('right')) {
        battlerObj.mainBody.applyMovement(vel);
    }
};

/** override */
LMBS_FallAction.prototype.onStandGround = function(battlerObj) {
    battlerObj.changeAction("Idle");
}

//=============================================================================
/**
 *
 */
function LMBS_ActionRunner() { this.initialize.apply(this, arguments); }
//LMBS_ActionRunner.prototype = Object.create(LMBS_InterpreterBase.prototype);
LMBS_ActionRunner.prototype.constructor = LMBS_ActionRunner;

/** constructor */
LMBS_ActionRunner.prototype.initialize = function(ownerBattlerObj) {
    //LMBS_InterpreterBase.prototype.initialize.call(this, ownerBattlerObj, commandCallbackMap);
    this._ownerBattlerObj = ownerBattlerObj;
    this._action = null;
    this._interpreter = new LMBS_InterpreterBase(ownerBattlerObj, null);
    this._frameCount = 0;
};

/** */
LMBS_ActionRunner.prototype.getAction = function() {
    return this._action;
};

/** */
LMBS_ActionRunner.prototype.getFrameCount = function() {
    return this._frameCount;
};

/** */
LMBS_ActionRunner.prototype.changeAction = function(name) {
    // 適用中アクションと同じものなら何もしない
    if (this._action != null && this._action.name == name) {
        return;
    }
    this._frameCount = 0;
    var action = LMBS_ActionManager.getAction(name);
    action.onAttached(this._ownerBattlerObj);
    this._action = action;
    this._interpreter.setup(action.getCommandList());
};

/** */
LMBS_ActionRunner.prototype.update = function() {
    this._interpreter.update();
    if (this._action != null) {
        this._action.onUpdate(this._ownerBattlerObj);
    }
    this._frameCount++;
};

/** 新しく接地したとき */
LMBS_ActionRunner.prototype.onStandGround = function() {
    if (this._action != null) {
        this._action.onStandGround(this._ownerBattlerObj);
    }
};

/** 地面から離れた時 */
LMBS_ActionRunner.prototype.onLeaveGround = function() {
    if (this._action != null) {
        this._action.onLeaveGround(this._ownerBattlerObj);
    }
};
