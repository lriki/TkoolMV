// Generated by RPG Maker.
// Do not edit this file directly.
var $plugins =
[
  {"name":"LMBS＿Motion","status":true,"description":"","parameters":{}}
];





//=============================================================================
/**
 *
 */
function LMBS_PredefinedUserInput() {
    throw new Error('This is a static class');
}

/**
 *
 */
LMBS_PredefinedUserInput.tryInputNormalAttack = function(battlerObj) {
    if (Input.isTriggered(LMBS_Settings.keyNormalAttack)) {

    }
}

//=============================================================================
/**
 *
 */
function LMBS_ActionManager() {
    throw new Error('This is a static class');
}

LMBS_ActionManager._actions   = {};

/**
 */
LMBS_ActionManager.setup = function() {
    this.registerAction(new LMBS_IdleAction("Idle"));
    this.registerAction(new LMBS_WalkAction("Walk"));
    this.registerAction(new LMBS_JumpAction("Jump"));
}

/**
 * @param name {String}
 * @param motion {LMBS_Motion}
 */
LMBS_ActionManager.registerAction = function(action) {
    this._actions[action.name] = action;
}

/**
 * @param name {String}
 */
LMBS_ActionManager.getAction = function(name) {
    return this._actions[name];
}

//=============================================================================
// LMBS_Action
//-----------------------------------------------------------------------------
//
//=============================================================================
function LMBS_Action() { this.initialize.apply(this, arguments); }
LMBS_Action.prototype.constructor = LMBS_Action;

/**
 * constructor
 */
LMBS_Action.prototype.initialize = function(name) {
    this.name = name;
}

/**
 */
LMBS_Action.prototype.onAttached = function(battlerObj) {
}

/**
 */
LMBS_Action.prototype.onUserInput = function(battlerObj) {
}

/**
 */
LMBS_Action.prototype.onUpdate = function(battlerObj) {
}

/** 新しく接地したとき */
LMBS_Action.prototype.onStandGround = function(battlerObj) {
}

/** 地面から離れた時 */
LMBS_Action.prototype.onLeaveGround = function(battlerObj) {
}

//=============================================================================
/**
 * アイドリング（待機）アクション
 * @class LMBS_IdleAction
 * @constructor
 */
function LMBS_IdleAction() { this.initialize.apply(this, arguments); }
LMBS_IdleAction.prototype = Object.create(LMBS_Action.prototype);
LMBS_IdleAction.prototype.constructor = LMBS_IdleAction;

/**
 * constructor
 */
LMBS_IdleAction.prototype.initialize = function(name) {
    LMBS_Action.prototype.initialize.call(this, name);
}

/**
 *  override
 */
LMBS_IdleAction.prototype.onAttached = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);
    // モーション開始
    battlerObj.changeMotion("basic_wait");
}

/**
 */
LMBS_IdleAction.prototype.onUserInput = function(battlerObj) {
    LMBS_Action.prototype.onUserInput.call(this, battlerObj);
    if (Input.dir4 == 4) {
        battlerObj.direction = LMBS_Battler.DIRECTION.LEFT;
        battlerObj.changeAction("Walk");
    }
    else if (Input.dir4 == 6) {
        battlerObj.direction = LMBS_Battler.DIRECTION.RIGHT;
        battlerObj.changeAction("Walk");
    }
    if (Input.isPressed('up')) {
        battlerObj.changeAction("Jump");
    }
}

/**
 *  override
 */
LMBS_IdleAction.prototype.onUpdate = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);

    // ターゲットに向く
    var target = battlerObj.getActionTargetBattlerObject();
    if (target != null) {
        var d = target.position.x - battlerObj.position.x;
        battlerObj.direction = d / Math.abs(d); // 正規化。1Dなのでこれでいい。
    }
}

//=============================================================================
/**
 * 歩行アクション
 * @class LMBS_WalkAction
 * @constructor
 */
function LMBS_WalkAction() { this.initialize.apply(this, arguments); }
LMBS_WalkAction.prototype = Object.create(LMBS_Action.prototype);
LMBS_WalkAction.prototype.constructor = LMBS_WalkAction;

/**
 * constructor
 */
LMBS_WalkAction.prototype.initialize = function(name) {
    LMBS_Action.prototype.initialize.call(this, name);
}

/**
 *  override
 */
LMBS_WalkAction.prototype.onAttached = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);
    // モーション開始
    battlerObj.changeMotion("basic_move");

    // test
    var animation = $dataAnimations[2];
    //var mirror = data.mirror;
    //var delay = animation.position === 3 ? 0 : data.delay;
    //battlerObj._visual.mainSprite.startAnimation(animation, false, 0);
}

/**
 *  override
 */
LMBS_WalkAction.prototype.onUserInput = function(battlerObj) {
    LMBS_Action.prototype.onUserInput.call(this, battlerObj);
    var vel = battlerObj.direction;
    if (Input.isPressed('left')) {
        battlerObj.mainBody.applyMovement(vel, 0);
    }
    else if (Input.isPressed('right')) {
        battlerObj.mainBody.applyMovement(vel, 0);
    }
    else {
        // キーが押されていなければ Idle 状態へ
        battlerObj.changeAction("Idle");
    }
}

/**
 *  override
 */
LMBS_WalkAction.prototype.onUpdate = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);

}


//=============================================================================
/**
 * ジャンプアクション
 */
function LMBS_JumpAction() { this.initialize.apply(this, arguments); }
LMBS_JumpAction.prototype = Object.create(LMBS_Action.prototype);
LMBS_JumpAction.prototype.constructor = LMBS_JumpAction;

/** constructor */
LMBS_JumpAction.prototype.initialize = function(name) {
    LMBS_Action.prototype.initialize.call(this, name);
}

/** override */
LMBS_JumpAction.prototype.onAttached = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);
    // モーション開始
    battlerObj.changeMotion("basic_move");

    battlerObj.mainBody.applyImpulse(0, 1);
}

/** override */
LMBS_JumpAction.prototype.onUserInput = function(battlerObj) {
    LMBS_Action.prototype.onUserInput.call(this, battlerObj);
    var vel = battlerObj.direction;
    if (Input.isPressed('left')) {
        battlerObj.mainBody.applyMovement(vel, 0);
    }
    else if (Input.isPressed('right')) {
        battlerObj.mainBody.applyMovement(vel, 0);
    }
    else {
        // キーが押されていなければ Idle 状態へ
        //battlerObj.changeAction("Idle");
    }
}

/** override */
LMBS_WalkAction.prototype.onUpdate = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);

}


//=============================================================================
/**
 *
 */
function LMBS_InterpreterBase() { this.initialize.apply(this, arguments); }
LMBS_InterpreterBase.prototype.constructor = LMBS_InterpreterBase;

/** constructor */
LMBS_InterpreterBase.prototype.initialize = function(ownerBattlerObj, commandCallbackMap) {
    this.clear();
    this._ownerBattlerObj = ownerBattlerObj;
    this._commandCallbackMap = commandCallbackMap;
}

/** */
LMBS_InterpreterBase.prototype.ownerBattlerObj = function(list) {
    return this._ownerBattlerObj;
};

/** */
LMBS_InterpreterBase.prototype.clear = function() {
    this._list = null;
    this._index = 0;
    this._waitCount = 0;
    this._waitMode = '';
    this._params = null;
    this._indent = 0;
};

/** */
LMBS_InterpreterBase.prototype.setup = function(list) {
    this.clear();
    this._list = list;
};

/** */
LMBS_InterpreterBase.prototype.isRunning = function() {
    return !!this._list;
};

/** */
LMBS_InterpreterBase.prototype.update = function() {
    while (this.isRunning()) {
        if (this.updateWait()) {
            break;
        }
        if (!this.executeCommand()) {
            break;
        }
    }
}

/** */
LMBS_InterpreterBase.prototype.updateWait = function() {
    return this.updateWaitCount() || this.updateWaitMode();
};

/** */
LMBS_InterpreterBase.prototype.updateWaitCount = function() {
    if (this._waitCount > 0) {
        this._waitCount--;
        return true;
    }
    return false;
};

/** */
LMBS_InterpreterBase.prototype.updateWaitMode = function() {
    var waiting = false;
    //switch (this._waitMode) {
    //case 'message':
  //      waiting = $gameMessage.isBusy();
  //      break;
  //  }
    if (!waiting) {
        this._waitMode = '';
    }
    return waiting;
};

/** */
LMBS_InterpreterBase.prototype.executeCommand = function() {
    var command = this.currentCommand();
    if (command) {
        this._params = command.parameters;
        this._indent = command.indent;
        if (!_commandCallbackMap[command.methodName]()) {
            return false;
        }
        this._index++;
    } else {
        this.terminate();
    }
    return true;
};

/** */
LMBS_InterpreterBase.prototype.terminate = function() {
    this._list = null;
    this._comments = '';
};

/** */
LMBS_InterpreterBase.prototype.currentCommand = function() {
    return this._list[this._index];
};


//=============================================================================
/**
 *
 */
function LMBS_ActionInterpreter() { this.initialize.apply(this, arguments); }
LMBS_ActionInterpreter.prototype = Object.create(LMBS_InterpreterBase.prototype);
LMBS_ActionInterpreter.prototype.constructor = LMBS_ActionInterpreter;

/** constructor */
LMBS_ActionInterpreter.prototype.initialize = function(ownerBattlerObj, commandCallbackMap) {
    LMBS_InterpreterBase.prototype.initialize.call(this, ownerBattlerObj, commandCallbackMap);
    this._predefinedAction = null;
};

/** */
LMBS_ActionInterpreter.prototype.setupCommandListAction = function(list) {
    LMBS_InterpreterBase.prototype.setup.call(this, list);
    this._predefinedAction = null;
};

/** */
LMBS_ActionInterpreter.prototype.setupPredefinedAction = function(action) {
    this.clear();
    this._predefinedAction = action;
};


/** */
LMBS_ActionInterpreter.prototype.predefinedAction = function() {
    return this._predefinedAction;
};

/** */
LMBS_ActionInterpreter.prototype.update = function() {
    if (this._predefinedAction != null) {
        this._predefinedAction.onUpdate(this.ownerBattlerObj());
    }
    else {
        LMBS_InterpreterBase.prototype.update.call(this);
    }
};
