// Generated by RPG Maker.
// Do not edit this file directly.
var $plugins =
[
  {"name":"LMBS＿Motion","status":true,"description":"","parameters":{}}
];





//=============================================================================
/**
 *
 */
function LMBS_PredefinedUserInput() {
    throw new Error('This is a static class');
}

/**
 *
 */
LMBS_PredefinedUserInput.tryInputNormalAttack = function(battlerObj) {
    if (Input.isTriggered(LMBS_Settings.keyNormalAttack)) {

    }
}

//=============================================================================
/**
 *
 */
function LMBS_ActionManager() {
    throw new Error('This is a static class');
}

LMBS_ActionManager._actions   = {};

/**
 */
LMBS_ActionManager.setup = function() {
    this.registerAction(new LMBS_IdleAction("Idle"));
    this.registerAction(new LMBS_WalkAction("Walk"));
}

/**
 * @param name {String}
 * @param motion {LMBS_Motion}
 */
LMBS_ActionManager.registerAction = function(action) {
    this._actions[action.name] = action;
}

/**
 * @param name {String}
 */
LMBS_ActionManager.getAction = function(name) {
    return this._actions[name];
}

//=============================================================================
// LMBS_Action
//-----------------------------------------------------------------------------
//
//=============================================================================
function LMBS_Action() { this.initialize.apply(this, arguments); }
LMBS_Action.prototype.constructor = LMBS_Action;

/**
 * constructor
 */
LMBS_Action.prototype.initialize = function(name) {
    this.name = name;
}

/**
 */
LMBS_Action.prototype.onAttached = function(battlerObj) {
}

/**
 */
LMBS_Action.prototype.onUserInput = function(battlerObj) {
}

/**
 */
LMBS_Action.prototype.onUpdate = function(battlerObj) {
}

//=============================================================================
/**
 * アイドリング（待機）アクション
 * @class LMBS_IdleAction
 * @constructor
 */
function LMBS_IdleAction() { this.initialize.apply(this, arguments); }
LMBS_IdleAction.prototype = Object.create(LMBS_Action.prototype);
LMBS_IdleAction.prototype.constructor = LMBS_IdleAction;

/**
 * constructor
 */
LMBS_IdleAction.prototype.initialize = function(name) {
    LMBS_Action.prototype.initialize.call(this, name);
}

/**
 *  override
 */
LMBS_IdleAction.prototype.onAttached = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);
    // モーション開始
    battlerObj.changeMotion("basic_wait");
}

/**
 */
LMBS_IdleAction.prototype.onUserInput = function(battlerObj) {
    LMBS_Action.prototype.onUserInput.call(this, battlerObj);
    if (Input.dir4 == 4) {
        battlerObj.direction = LMBS_Battler.DIRECTION.LEFT;
        battlerObj.changeAction("Walk");
    }
    else if (Input.dir4 == 6) {
        battlerObj.direction = LMBS_Battler.DIRECTION.RIGHT;
        battlerObj.changeAction("Walk");
    }
}

/**
 *  override
 */
LMBS_IdleAction.prototype.onUpdate = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);

    // ターゲットに向く
    var target = battlerObj.getActionTargetBattlerObject();
    if (target != null) {
        var d = target.position.x - battlerObj.position.x;
        battlerObj.direction = d / Math.abs(d); // 正規化。1Dなのでこれでいい。
    }
}

//=============================================================================
/**
 * 歩行アクション
 * @class LMBS_WalkAction
 * @constructor
 */
function LMBS_WalkAction() { this.initialize.apply(this, arguments); }
LMBS_WalkAction.prototype = Object.create(LMBS_Action.prototype);
LMBS_WalkAction.prototype.constructor = LMBS_WalkAction;

/**
 * constructor
 */
LMBS_WalkAction.prototype.initialize = function(name) {
    LMBS_Action.prototype.initialize.call(this, name);
}

/**
 *  override
 */
LMBS_WalkAction.prototype.onAttached = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);
    // モーション開始
    battlerObj.changeMotion("basic_move");

    // test
    var animation = $dataAnimations[2];
    //var mirror = data.mirror;
    //var delay = animation.position === 3 ? 0 : data.delay;
    //battlerObj._visual.mainSprite.startAnimation(animation, false, 0);
}

/**
 *  override
 */
LMBS_WalkAction.prototype.onUserInput = function(battlerObj) {
    LMBS_Action.prototype.onUserInput.call(this, battlerObj);
    var vel = battlerObj.direction;
    if (Input.isPressed('left')) {
        battlerObj.mainBody.applyMovement(vel, 0);
    }
    else if (Input.isPressed('right')) {
        battlerObj.mainBody.applyMovement(vel, 0);
    }
    else {
        // キーが押されていなければ Idle 状態へ
        battlerObj.changeAction("Idle");
    }
}

/**
 *  override
 */
LMBS_WalkAction.prototype.onUpdate = function(battlerObj) {
    LMBS_Action.prototype.onUpdate.call(this, battlerObj);

}
